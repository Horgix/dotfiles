#!/bin/bash

function _mip_parseipr2(){
  if [ -n "$1" ]; then
    awk_pre_gsub="gsub(\"$1\",\"[$1]\");"
  fi
  awk "{ $awk_pre_gsub gsub(\"/\",\" /\"); print \$2\":\t\"\$4\" \"\$5}"
}

function _mip_common(){
  if [ -n "$2" ]; then
    ip -f $inetfamily -o a s dev $2| _mip_parseipr2 | column -t | awk '{print "\t"$0}'
  else
    default_iface=$(awk '{ if ($2 == '00000000') {print $1}}' /proc/net/route | head -n 1)
    inetfamily="$1"
    netns_list=$(ip -o  netns list 2>/dev/null)
    if [ -n "$netns_list" ]; then
      for netns in $netns_list; do
        echo "NS: $netns"
        if [ "$UID" != "0" ]; then
          echo -e "\t(Reading NS informations requires root access)"
        else
          ip netns exec $netns ip -f $inetfamily -o a| _mip_parseipr2 | column -t | awk '{print "\t"$0}'
          echo
        fi
      done
    fi
    echo "NS: Current"
    ip -f $inetfamily -o a| _mip_parseipr2 $default_iface| column -t | awk '{print "\t"$0}'
  fi

}
function mip6(){
  _mip_common inet6 $@
}
function mip(){
  _mip_common inet $@
}

function disk-bw(){
  cat /sys/block/$1/stat | awk '{print "READ: "$3"\nWRITE: "$8}'
}

function nthash(){
  echo "import hashlib,binascii
hash = hashlib.new('md4', '$1'.encode('utf-16le')).digest()
print binascii.hexlify(hash)" | python
}

function net-bw(){
  if [ -z "$1" ]; then
    echo
    echo usage: $0 network-interface
    echo
    echo e.g. $0 eth0
    echo
  else
    IF=$1
    R1=`cat /sys/class/net/$1/statistics/rx_bytes`
    T1=`cat /sys/class/net/$1/statistics/tx_bytes`
    sleep 1
    R2=`cat /sys/class/net/$1/statistics/rx_bytes`
    T2=`cat /sys/class/net/$1/statistics/tx_bytes`
    TBPS=`expr $T2 - $T1`
    RBPS=`expr $R2 - $R1`
    TKBPS=`expr $TBPS / 1024`
    RKBPS=`expr $RBPS / 1024`
    echo "tx $1: $TKBPS kb/s rx $1: $RKBPS kb/s"
fi

}
function swaptop(){
  (for PROCESS in /proc/*/; do
    swapused=$(awk 'BEGIN { total = 0 } /^Swap:[[:blank:]]*[1-9]/ { total = total + $2 } END { print total }' ${PROCESS}/smaps 2>/dev/null || echo 0)
    if [ $swapused -gt 0 ]; then
      /bin/echo -e "${swapused}k\t$(cat ${PROCESS}/cmdline)"
    fi
  done ) | sort -nr
}

function vmip(){
  sudo virsh qemu-agent-command $1 '{"execute":"guest-network-get-interfaces"}' | python -mjson.tool
}

function crawlDNS() {
   if [ -z "$1" ] || [ $1 == "-h" ]; then
      echo "Usage: crawlDNS <domain> (dns_request_type)"
   else
      DOMAIN=$1
      TYPE=${2-A}
      echo "OBS: $(dig @194.2.0.20 $DOMAIN +short $TYPE)"
      echo "FDN: $(dig @80.67.169.12 $DOMAIN +short $TYPE)"
      echo "Google: $(dig @8.8.8.8 $DOMAIN +short $TYPE)"
      echo "OpenDNS: $(dig @208.67.222.222 $DOMAIN +short $TYPE)"
      echo "FreeDNS: $(dig @37.235.1.174 $DOMAIN +short $TYPE)"
      echo "Level3: $(dig @209.244.0.3 $DOMAIN +short $TYPE)"
      echo "OpenNIC: $(dig @87.98.175.85 $DOMAIN +short $TYPE)"
   fi
}

function minicv(){
  # Usage: minicv <prog name>
  # Ex: minicv glance
  if [ -z "$1" ]; then
    echo "Usage: minicv <prog name>"
    return
  fi
  PROC=$(pgrep $1 | tail -n 1)
  if [ -z "$PROC" -o ! -d /proc/$PROC/ ]; then
    echo "$1 is not a valid process"
    return
  fi
  FD_List=$(find -L /proc/$PROC/fd/ -type f -exec basename {} \;)
  for FD in $FD_List; do    
    TOTAL_SIZE=$(du -bL /proc/$PROC/fd/$FD | awk '{print $1}')
    CURRENT_SIZE=$(grep pos /proc/$PROC/fdinfo/$FD | awk '{print $2}')
    percent=$(echo "scale=3;a=($CURRENT_SIZE / $TOTAL_SIZE); a*100"  | bc)
    echo "$(realpath /proc/$PROC/fd/$FD): $percent%"
  done
}
  
function c(){
  folder="${SMILE_CLIENT_FOLDER:-~/Documents/Smile/client}"
  cd $folder/$1
}
nofile () {
  echo -e "NFI\tPNAME\tPID\tUSER"
  lsof 2> /dev/null | awk '$4 ~ /[0-9]+[rwu -].*/{p[$1"\t"$2"\t"$3]=p[$1"\t"$2"\t"$3]+1}END{for (i in p) print p[i],i}' | sort -nr | head
}

function proc2restart(){
  #sudo egrep '(/lib|/usr/lib).*(deleted)' /proc/[0-9]*/maps  | cut -f 3 -d / | sort | uniq |while read pid; do 
  sudo awk -F '/' '/(\/lib|\/usr\/lib|\/tmp).*(deleted)/{print $3}' /proc/[0-9]*/maps | while read pid; do
    readlink /proc/$pid/exe; 
  done | sort | uniq -c
}

function smile-print(){
  if [ -n "$1" ]; then
    cat $1 | nc 10.1.0.12 9100
  else
    echo "usage : smile-print file.ps"
  fi
}

function pssh(){
  proxy_str=$(echo $http_proxy | cut -f 3 -d /)
  proxy_auth=$(echo $proxy_str | awk -F @ '{print $1}')
  proxy_host=$(echo $proxy_str | awk -F @ '{print $2}')
  if [ -n "$proxy_auth" ]; then
    auth_flag="-P $(echo $proxy_auth | tr -d '@')"
  fi
  ssh -o "ProxyCommand proxytunnel -p $proxy_host $auth_flag -d %h:%p" $@
}

mip
